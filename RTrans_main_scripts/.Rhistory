for (src.id in names(x)){
cur.mapped.id = mapped.ids[src.id]
print(cur.mapped.id)
#weigthed.sums[cur.mapped.id] = weigthed.sums[cur.mapped.id] + cpms[src.id]*x[src.id]
#sums.of.weigths[cur.mapped.id] = sums.of.weigths[cur.mapped.id] + cpms[src.id]
}
weigthed.sums[cur.mapped.id]
cur.mapped.id
logFCs.short = c(2.128278,-5.138363,2.27,-3.53,10,3,4)
names(logFCs.short) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643')
pv.out <- pathview(gene.data = logFCs.short,
gene.idtype = "ENSEMBL",
pathway.id = 'dme00190', species = 'dme', same.layer = T,
out.suffix = 'temp1', keys.align = "y", kegg.native = T,
limit = list(gene = 3), bins = list(gene = 12),node.sum='sum')
x = c(2.128278,-5.138363,2.27,-3.53,10,3,4,98)
names(x) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
mapped.ids = c('37228','39348','35590','32887','38780','48381','48381',NA)
names(mapped.ids) = names(x)
x = x[!is.na(mapped.ids)]
mapped.ids = mapped.ids[!is.na(mapped.ids)]
x = c(2.128278,-5.138363,2.27,-3.53,10,3,4,98)
names(x) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
mapped.ids = c('37228','39348','35590','32887','38780','48381','48381',NA)
####
names(mapped.ids) = names(x)
## removing NAs
x = x[!is.na(mapped.ids)]
mapped.ids = mapped.ids[!is.na(mapped.ids)]
## weighted sum
mapped.ids.list = levels(factor(mapped.ids))
mapped.ids.count = length(mapped.ids.list)
weigthed.sums = rep(0,mapped.ids.count)      ## sum of LogFC1*CPM1 + LogFC2*CPM2 + ...
names(weigthed.sums) = mapped.ids.list
sums.of.weigths = rep(0,mapped.ids.count)    ## sum of CPM1 + CPM2 + CPM3 + ...
names(sums.of.weigths) = mapped.ids.list
for (src.id in names(x)){
cur.mapped.id = mapped.ids[src.id]
weigthed.sums[cur.mapped.id] = weigthed.sums[cur.mapped.id] + cpms[src.id]*x[src.id]
sums.of.weigths[cur.mapped.id] = sums.of.weigths[cur.mapped.id] + cpms[src.id]
}
sums.of.weigths
weigthed.sums
weigthed.sums/sums.of.weigths
tapply(x, mapped.ids, sum, na.rm=T)
a
a='dsfsdfsd'
a=='sdfsdf'
install.packages('C:/Intel/pathview_mod', repos = NULL, type="source")
install.packages('C:/Intel/pathview_mod', repos = NULL, type="source")
library('pathview')
logFCs.short = c(2.128278,-5.138363,2.27,-3.53,10,3,4,15)
names(logFCs.short) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
cpms = c(1,1,1,1,1,5,0.5,8)
names(cpms) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
pv.out <- pathview(gene.data = logFCs.short,
gene.idtype = "ENSEMBL",
pathway.id = 'dme00190', species = 'dme', same.layer = T,
out.suffix = 'temp1', keys.align = "y", kegg.native = T,
limit = list(gene = 3), bins = list(gene = 12),node.sum='sum',cpm.data = cpms)
install.packages('C:/Intel/pathview_mod', repos = NULL, type="source")
library('pathview')
logFCs.short = c(2.128278,-5.138363,2.27,-3.53,10,3,4,15)
names(logFCs.short) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
cpms = c(1,1,1,1,1,5,0.5,8)
names(cpms) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
pv.out <- pathview(gene.data = logFCs.short,
gene.idtype = "ENSEMBL",
pathway.id = 'dme00190', species = 'dme', same.layer = T,
out.suffix = 'temp1', keys.align = "y", kegg.native = T,
limit = list(gene = 3), bins = list(gene = 12),node.sum='sum',cpm.data = cpms)
install.packages('C:/Intel/pathview_mod', repos = NULL, type="source")
library('pathview')
logFCs.short = c(2.128278,-5.138363,2.27,-3.53,10,3,4,15)
names(logFCs.short) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
cpms = c(1,1,1,1,1,5,0.5,8)
names(cpms) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
pv.out <- pathview(gene.data = logFCs.short,
gene.idtype = "ENSEMBL",
pathway.id = 'dme00190', species = 'dme', same.layer = T,
out.suffix = 'temp1', keys.align = "y", kegg.native = T,
limit = list(gene = 3), bins = list(gene = 12),node.sum='sum',cpm.data = cpms)
install.packages('C:/Intel/pathview_mod', repos = NULL, type="source")
library('pathview')
logFCs.short = c(2.128278,-5.138363,2.27,-3.53,10,3,4,15)
names(logFCs.short) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
cpms = c(1,1,1,1,1,5,0.5,8)
names(cpms) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
pv.out <- pathview(gene.data = logFCs.short,
gene.idtype = "ENSEMBL",
pathway.id = 'dme00190', species = 'dme', same.layer = T,
out.suffix = 'temp1', keys.align = "y", kegg.native = T,
limit = list(gene = 3), bins = list(gene = 12),node.sum='sum',cpm.data = cpms)
install.packages('C:/Intel/pathview_mod', repos = NULL, type="source")
library('pathview')
#with entrez dup
logFCs.short = c(2.128278,-5.138363,2.27,-3.53,10,3,4,15)
names(logFCs.short) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
cpms = c(1,1,1,1,1,5,0.5,8)
names(cpms) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
pv.out <- pathview(gene.data = logFCs.short,
gene.idtype = "ENSEMBL",
pathway.id = 'dme00190', species = 'dme', same.layer = T,
out.suffix = 'temp1', keys.align = "y", kegg.native = T,
limit = list(gene = 3), bins = list(gene = 12),node.sum='sum',cpm.data = cpms)
data.array(c(1,2,3,4))
array(c(1,2,3,4))
data.frame(c(1,2,3,4))
data.matrix(c(1,2,3,4))
names(data.matrix(c(1,2,3,4)))
as.vector(data.matrix(c(1,2,3,4)))
typeof(data.matrix(c(1,2,3,4)))
colnames(data.matrix(c(1,2,3,4)))
####
x = c(2.128278,-5.138363,2.27,-3.53,10,3,4,98)
names(x) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
mapped.ids = c('37228','39348','35590','32887','38780','48381','48381',NA)
#####
#### INSERTION TO mol.sum.R
names(mapped.ids) = names(x)
## removing NAs
x = x[!is.na(mapped.ids)]
mapped.ids = mapped.ids[!is.na(mapped.ids)]
## calculating weighted sum LogFC
mapped.ids.list = levels(factor(mapped.ids))
mapped.ids.count = length(mapped.ids.list)
weigthed.sums = rep(0,mapped.ids.count)      ## sum of LogFC1*CPM1 + LogFC2*CPM2 + ...
names(weigthed.sums) = mapped.ids.list
sums.of.weigths = rep(0,mapped.ids.count)    ## sum of CPM1 + CPM2 + CPM3 + ...
names(sums.of.weigths) = mapped.ids.list
for (src.id in names(x)){
cur.mapped.id = mapped.ids[src.id]
weigthed.sums[cur.mapped.id] = weigthed.sums[cur.mapped.id] + cpms[src.id]*x[src.id]
sums.of.weigths[cur.mapped.id] = sums.of.weigths[cur.mapped.id] + cpms[src.id]
}
weigthed.sums/sums.of.weigths
dim(data.matrix(c(1,2,3,4)))
length(data.matrix(c(1,2,3,4)))
dim(as.vector(data.matrix(c(1,2,3,4))))
is.null(dim(as.vector(data.matrix(c(1,2,3,4)))))
y = data.matrix(c(1,2,3,4))
y
colnames(y) = c(4,5,5,6)
rownames(y) = c('4','5','5','6')
as.vector(y)
x = as.vector(y)
names(x) = as.character(rownames(y))
x
install.packages('C:/Intel/pathview_mod', repos = NULL, type="source")
library('pathview')
logFCs.short = c(2.128278,-5.138363,2.27,-3.53,10,3,4,15)
names(logFCs.short) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
cpms = c(1,1,1,1,1,5,0.5,8)
names(cpms) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
pv.out <- pathview(gene.data = logFCs.short,
gene.idtype = "ENSEMBL",
pathway.id = 'dme00190', species = 'dme', same.layer = T,
out.suffix = 'temp1', keys.align = "y", kegg.native = T,
limit = list(gene = 3), bins = list(gene = 12),node.sum='sum',cpm.data = cpms)
install.packages('C:/Intel/pathview_mod', repos = NULL, type="source")
library('pathview')
logFCs.short = c(2.128278,-5.138363,2.27,-3.53,10,3,4,15)
names(logFCs.short) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
cpms = c(1,1,1,1,1,5,0.5,8)
names(cpms) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
pv.out <- pathview(gene.data = logFCs.short,
gene.idtype = "ENSEMBL",
pathway.id = 'dme00190', species = 'dme', same.layer = T,
out.suffix = 'temp1', keys.align = "y", kegg.native = T,
limit = list(gene = 3), bins = list(gene = 12),node.sum='sum',cpm.data = cpms)
install.packages('C:/Intel/pathview_mod', repos = NULL, type="source")
library('pathview')
logFCs.short = c(2.128278,-5.138363,2.27,-3.53,10,3,4,15)
names(logFCs.short) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
cpms = c(1,1,1,1,1,5,0.5,8)
names(cpms) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
pv.out <- pathview(gene.data = logFCs.short,
gene.idtype = "ENSEMBL",
pathway.id = 'dme00190', species = 'dme', same.layer = T,
out.suffix = 'temp1', keys.align = "y", kegg.native = T,
limit = list(gene = 3), bins = list(gene = 12),node.sum='sum',cpm.data = cpms)
install.packages('C:/Intel/pathview_mod', repos = NULL, type="source")
library('pathview')
install.packages('C:/Intel/pathview_mod', repos = NULL, type="source")
library('pathview')
logFCs.short = c(2.128278,-5.138363,2.27,-3.53,10,3,4,15)
names(logFCs.short) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
cpms = c(190,1,1,1,1,5,0.5,8)
names(cpms) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
pv.out <- pathview(gene.data = logFCs.short,
gene.idtype = "ENSEMBL",
pathway.id = 'dme00190', species = 'dme', same.layer = T,
out.suffix = 'temp1', keys.align = "y", kegg.native = T,
limit = list(gene = 3), bins = list(gene = 12),node.sum='sum',cpm.data = cpms)
c(1,2,3,4,5,6) %in% c(3,4,5)
logFCs.short = c(2.128278,-5.138363,2.27,-3.53,10,3,4,15)
names(logFCs.short) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
cpms = c(190,1,1,1,1,5,0.5,8)
names(cpms) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
pv.out <- pathview(gene.data = logFCs.short,
gene.idtype = "ENSEMBL",
pathway.id = 'dme00190', species = 'dme', same.layer = T,
out.suffix = 'temp1', keys.align = "y", kegg.native = T,
limit = list(gene = 3), bins = list(gene = 12),node.sum='sum',cpm.data = cpms)
logFCs.short = c(2.128278,-5.138363,2.27,-3.53,10,3,4,15)
names(logFCs.short) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','Fbgnd23213123','FBgn0020644','FBgn0020643')
cpms = c(190,1,1,1,1,5,0.5,8)
names(cpms) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','Fbgnd23213123','FBgn0020644','FBgn0020643')
pv.out <- pathview(gene.data = logFCs.short,
gene.idtype = "ENSEMBL",
pathway.id = 'dme00190', species = 'dme', same.layer = T,
out.suffix = 'temp1', keys.align = "y", kegg.native = T,
limit = list(gene = 3), bins = list(gene = 12),node.sum='sum',cpm.data = cpms)
install.packages('C:/Intel/pathview_mod', repos = NULL, type="source")
library('pathview')
logFCs.short = c(2.128278,-5.138363,2.27,-3.53,10,3,4,15)
names(logFCs.short) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
cpms = c(190,1,1,1,1,5,0.5,8)
names(cpms) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
pv.out <- pathview(gene.data = logFCs.short,
gene.idtype = "ENSEMBL",
pathway.id = 'dme00190', species = 'dme', same.layer = T,
out.suffix = 'temp1', keys.align = "y", kegg.native = T,
limit = list(gene = 3), bins = list(gene = 12),node.sum='sum',cpm.data = cpms)
eff.idx2 = c(T,T,T,T,T,T,F)
cbind(cbind(logFCs.short)[eff.idx2,])
install.packages('C:/Intel/pathview_mod', repos = NULL, type="source")
library('pathview')
logFCs.short = c(2.128278,-5.138363,2.27,-3.53,10,3,4,15)
names(logFCs.short) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
cpms = c(190,1,1,1,1,5,0.5,8)
names(cpms) = c('FBgn0261439','FBgn0036222','FBgn0014028','FBgn0030975','FBgn0035741','FBgn0020644','FBgn0020643','Fbgnd23213123')
pv.out <- pathview(gene.data = logFCs.short,
gene.idtype = "ENSEMBL",
pathway.id = 'dme00190', species = 'dme', same.layer = T,
out.suffix = 'temp1', keys.align = "y", kegg.native = T,
limit = list(gene = 3), bins = list(gene = 12),node.sum='sum',cpm.data = cpms)
####################        RTrans        ######################
##
##  This scrpit is aimed at the analysis of RNA-Seq data:
##   - differential expression between 2 conditions
##   - GLM multivariate testing for multiple conditions
##   - Gene Ontology enrichment analysis
##   - KEGG enrichment analysis
##   - Visualization of KEGG pathways (MAPK, PI3K/mTOR, p53, etc.)
##   - Creating heatmaps, PCA plots, etc.
##
##  To run RTrans you need:
##   - read counts per gene files which are generated with
##     HTSeq-count, featureCount or PPLine. By default,
##     *.counts files should be placed to 'counts' folder.
##   - Sample sheet. See the example in the 'Sample sheet.xlsx'
##   - Choose conditions or models to tesh via
##     setting 'Models.to.Test' variable (see an example below)
##
##  To align reads and generate *.counts files we recommend
##  PPLine, an automated pipeline for read alignment
##  (STAR/Tophat/bowtie), counting (HTSeq-count), transcript
##  quantification (Cufflinks) and SNP callign (GATK/samtools)
##  available at:  http://sourceforge.net/projects/ppline/
##
################################################################
Models.to.Test = c("Age + Tg_status","Tg_status + Age + Treat","Tg_status + Age")
Species = "mmu"  ## hsa, mmu, dme
results.dir = '{script_dir}'
sample.setup.file = "{script_dir}/sample.setup.txt"
counts.dir = "{script_dir}/counts"
suppl.data.dir = '{script_dir}/Supplementary_data'
Create.Heatmaps = F
Perform.GSEA = T
Perform.Pathway.Enrichment = T
Perform.Pathway.Visualization = T
add.MDS.dims.as.predictors = T
Normalize.predictors = T
##############################################################
##############################################################
##############################################################
load.or.install.packages.std <- function(pkg.list){
for (pkg in pkg.list) {
if (!(pkg %in% rownames(installed.packages()))){
eval(parse(text = sprintf("install.packages(\"%s\")",pkg)))
}
}
for (pkg in pkg.list) eval(parse(text = sprintf("library(\"%s\")",pkg)))
}
load.or.install.packages.bio <- function(pkg.list){
if (sum(!(pkg.list %in% rownames(installed.packages()))) > 0){
source("https://bioconductor.org/biocLite.R")
for (pkg in pkg.list){
if (!(pkg %in% rownames(installed.packages()))) eval(parse(text = sprintf("biocLite(\"%s\")",pkg)))
}
}
for (pkg in pkg.list) eval(parse(text = sprintf("library(\"%s\")",pkg)))
}
## installing packages
load.or.install.packages.std(c("rstudioapi",'gplots','ggdendro','digest',"lme4","readxl"))
if (Species == 'hsa')  load.or.install.packages.bio(c("org.Hs.eg.db"))
if (Species == 'mmu')  load.or.install.packages.bio(c("org.Mm.eg.db"))
if (Species == 'dme')  load.or.install.packages.bio(c("org.Dm.eg.db"))
load.or.install.packages.bio(c("Rgraphviz","edgeR","FactoMineR","biomaRt","topGO","clusterProfiler","DOSE"))
##
MDS_only = F
script.dir = dirname(rstudioapi::getActiveDocumentContext()$path)
results.dir = gsub('\\{script_dir\\}',script.dir,results.dir)
sample.setup.file = gsub('\\{script_dir\\}',script.dir,sample.setup.file)
counts.dir = gsub('\\{script_dir\\}',script.dir,counts.dir)
suppl.data.dir = gsub('\\{script_dir\\}',script.dir,suppl.data.dir)
RefSeq.Info.File = sprintf('%s/%s.Ensembl.Genes.Info.txt',suppl.data.dir,Species)
Pathway.names.table.File = sprintf('%s/KEGG.pathway.names.tsv',suppl.data.dir)
GO.full.descriptions.File = sprintf('%s/Gene Ontology terms descriptions.tsv',suppl.data.dir)
setwd(results.dir)
if (!('pathview' %in% rownames(installed.packages()))){
install.packages(sprintf('%s/pathview_mod',suppl.data.dir), repos = NULL, type="source") }
library('pathview')
Use.Info.Table = T
GSEA.mode.GO.list = c('upreg','downreg') ## variants: upreg, downreg, de
Max.DE.genes.GO.list = c(40,80,250,500,1000,2000)
Min.Score.GO = 0
Max.DE.genes.PA.list = c(40,80,250,500)
GSEA.mode.PA.list = c('upreg',"downreg")
Min.Score.PA = 40
Min.abs.LogFC.PA = 0.5
Max.Pvalue.PA = 0.03
Pathway.Visualization.max.P.value = 0.02
Extract.number.from.text <- function (x) {
comment.start = regexpr("\\#",x)[1]
if (comment.start > 0) x =substring(x,1,comment.start-1)
x = gsub("\\;","",gsub("\\,","",gsub("\t","",gsub(" ","",gsub(Species,"",x)))))
return(x)
}
Get.KEGG.pathway.list <- function(file.name){
conn <- file(file.name,open="r")
KEGG.lines = readLines(conn)
close(conn)
KEGG.lines = KEGG.lines[!(KEGG.lines %in% "")]
for (n in 1:length(KEGG.lines)){
KEGG.lines[n] = Extract.number.from.text(KEGG.lines[n])
}
KEGG.lines = KEGG.lines[!(KEGG.lines %in% "")]
KEGG.lines = as.numeric(KEGG.lines)
KEGG.lines = KEGG.lines[!(is.na(KEGG.lines))]
return(KEGG.lines)
}
KEGG.pathway.file = sprintf("%s/%s.KEGG.pathways.txt",suppl.data.dir,Species)
if (file.exists(KEGG.pathway.file)){
Custom.Pathways.to.Visualize = Get.KEGG.pathway.list(KEGG.pathway.file)
Custom.Pathways.to.Visualize = sprintf("%s%.5d",Species,Custom.Pathways.to.Visualize)
} else{
message(sprintf('\nWarning. KEGG pathway visualization list file %s is absent. Only enriched pathways will be drawn\n',KEGG.pathway.file))
}
KEGG.omit.pathway.file = sprintf("%s/%s.KEGG.omit.pathways.txt",suppl.data.dir,Species)
if (file.exists(KEGG.omit.pathway.file)){
Omit.pathways = Get.KEGG.pathway.list(KEGG.omit.pathway.file)
Omit.pathways = sprintf("%s%.5d",Species,Omit.pathways)
} else Omit.pathways = c()
if (file.exists(RefSeq.Info.File)) {  Info.table = read.table(RefSeq.Info.File,stringsAsFactors = F,blank.lines.skip = F,sep = '\t')
} else Use.Info.Table = F
if (Perform.Pathway.Enrichment | Perform.Pathway.Visualization){
Pathway.names.table = read.table(Pathway.names.table.File,sep='\t',stringsAsFactors = F,quote = "")
colnames(Pathway.names.table) = c("KEGG ID","Pathway name")
Pathway.names.table[,"KEGG ID"] = sprintf("%s%.5d",Species,Pathway.names.table[,"KEGG ID"])
rownames(Pathway.names.table) = Pathway.names.table[,"KEGG ID"]
Pathway.names.table[,"Pathway name"] = gsub(pattern = "'",replacement = "",x = Pathway.names.table[,"Pathway name"])
Pathway.names.table[,"Pathway name"] = gsub(pattern = "/",replacement = "-",x = Pathway.names.table[,"Pathway name"])
}
if (Perform.GSEA){
GO.full.descriptions = read.table(GO.full.descriptions.File,sep='\t',check.names = F,quote = "",stringsAsFactors = F,header = F)
colnames(GO.full.descriptions) = c('GO term','full description')
rownames(GO.full.descriptions) = GO.full.descriptions[,'GO term']
}
##### Managing bypassing for loops if the step is already accomplished
Completened.steps.file = sprintf("%s/Completed.steps.list",results.dir)
Read.Completed.steps.status <- function(step.name){
if (file.exists(Completened.steps.file)){
Completened.steps = as.vector(t(read.table(file = Completened.steps.file)))
} else{
Completened.steps = c()
}
if(step.name %in% Completened.steps){
cat(sprintf('\nStep %s had been alrealy accomplished. Bypassing.\n',step.name))
return(T)
}
return(F)
}
Add.Completed.step <- function(step.name){
if (file.exists(Completened.steps.file)){
Completened.steps = as.vector(t(read.table(file = Completened.steps.file)))
} else {
Completened.steps = c()
}
Completened.steps = c(Completened.steps, step.name)
write.table(x=Completened.steps, file = Completened.steps.file,sep='\t')
}
#####
##### Pre-creating complete gene list and retrieving biomaRt infor for these genes
#attributes <- c("external_gene_name", "ensembl_gene_id", "description")
if (substring(sample.setup.file, first = nchar(sample.setup.file) - nchar('.txt') + 1) %in% c('xlsx','.xls')){
schema = read_excel(sample.setup.file,sheet="Sample setup",col_names = T)
commented.lines = apply(X = schema[,1],MARGIN = 1,FUN = function (x) substring(x,first=1,last=1)) %in% '#'
schema = schema[!commented.lines,]
} else {
schema = read.table(sample.setup.file,header=TRUE,stringsAsFactors = F,comment.char = '#',sep = '\t',check.names = F)
}
if ("File_names" %in% colnames(schema)){
samples_counts=readDGE(sprintf("%s/%s",counts.dir,schema$File_names))
} else {
samples_counts=readDGE(sprintf("%s/%s.counts",counts.dir,schema$Sample_names))
}
noint = rownames(samples_counts$counts) %in% c("__no_feature","__ambiguous",'__too_low_aQual','__not_aligned','__alignment_not_unique')
complete.gene.list = sort(rownames(samples_counts$counts)[!noint],decreasing = F)
hashmd5 = digest(complete.gene.list)
General.maRt.table_file.name = sprintf("%s/maRt.table.%s.tsv",suppl.data.dir,hashmd5)
if (file.exists(General.maRt.table_file.name)) {
General.maRt.table = read.table(file=General.maRt.table_file.name, header = T, sep = '\t', stringsAsFactors = F)
} else {
if (Species == 'hsa') mart <- useMart("ensembl", dataset="hsapiens_gene_ensembl") #, host="www.ensembl.org"
if (Species == 'mmu') mart <- useMart("ensembl", dataset="mmusculus_gene_ensembl") #, host="www.ensembl.org"
if (Species == 'dme') mart <- useMart("ensembl", dataset="dmelanogaster_gene_ensembl") #, host="www.ensembl.org"
#curl.handle = getCurlHandle()
General.maRt.table = getBM(attributes=c("ensembl_gene_id","external_gene_name", "description","gene_biotype","entrezgene"),
filters="ensembl_gene_id",values=complete.gene.list, mart=mart)
General.maRt.table = General.maRt.table[!(duplicated(General.maRt.table[,"ensembl_gene_id"])),]
rownames(General.maRt.table) = General.maRt.table[,"ensembl_gene_id"]
General.maRt.table[,"description"] = gsub(pattern = "\\[Source:.*", replacement = "", x = General.maRt.table[,"description"], ignore.case = T,perl = FALSE)
write.table(x= General.maRt.table,file = General.maRt.table_file.name,sep = '\t')
}
Parameters.xlsx.file.name  ='C:/Users/gskra/OneDrive/Evgeniev/RTrans.parameters.xlsx'
if (!('rstudioapi' %in% rownames(installed.packages()))) install.packages("rstudioapi")
if (is.null(Parameters.xlsx.file.name)){
Parameters.xlsx.file.name = sprintf("%s/RTrans.parameters.xlsx",dirname(rstudioapi::getActiveDocumentContext()$path))
if (file.exists(Parameters.xlsx.file.name)){
cat(sprintf('\nFile with parameters found: %s\n',Parameters.xlsx.file.name))
} else stop(sprintf('Parameters.xlsx.file.name argument is not specified. No parameters *.xlsx file has been found in the default location '))
}
Data = new('RTransData')
Pars = Read.Parameters(Parameters.xlsx.file.name)
# installing/loading packages
load.or.install.packages.std(c("rstudioapi",'gplots','ggdendro','digest',"lme4","readxl"))
if (Pars$Species == 'hsa')  load.or.install.packages.bio(c("org.Hs.eg.db"))
if (Pars$Species == 'mmu')  load.or.install.packages.bio(c("org.Mm.eg.db"))
if (Pars$Species == 'dme')  load.or.install.packages.bio(c("org.Dm.eg.db"))
load.or.install.packages.bio(c("Rgraphviz","edgeR","FactoMineR","biomaRt","topGO","clusterProfiler","DOSE"))
if (!('rstudioapi' %in% rownames(installed.packages()))) install.packages("rstudioapi")
source(sprintf("%s/RTrans.base/RTrans.methods.R",dirname(rstudioapi::getActiveDocumentContext()$path)))
if (!('rstudioapi' %in% rownames(installed.packages()))) install.packages("rstudioapi")
if (is.null(Parameters.xlsx.file.name)){
Parameters.xlsx.file.name = sprintf("%s/RTrans.parameters.xlsx",dirname(rstudioapi::getActiveDocumentContext()$path))
if (file.exists(Parameters.xlsx.file.name)){
cat(sprintf('\nFile with parameters found: %s\n',Parameters.xlsx.file.name))
} else stop(sprintf('Parameters.xlsx.file.name argument is not specified. No parameters *.xlsx file has been found in the default location '))
}
Data = new('RTransData')
Pars = Read.Parameters(Parameters.xlsx.file.name)
# installing/loading packages
load.or.install.packages.std(c("rstudioapi",'gplots','ggdendro','digest',"lme4","readxl"))
if (Pars$Species == 'hsa')  load.or.install.packages.bio(c("org.Hs.eg.db"))
if (Pars$Species == 'mmu')  load.or.install.packages.bio(c("org.Mm.eg.db"))
if (Pars$Species == 'dme')  load.or.install.packages.bio(c("org.Dm.eg.db"))
load.or.install.packages.bio(c("Rgraphviz","edgeR","FactoMineR","biomaRt","topGO","clusterProfiler","DOSE"))
Pars$RefSeq.Info.File = sprintf('%s/%s.Ensembl.Genes.Info.txt',Pars$suppl.data.dir,Pars$Species)
Pars$Pathway.names.table.File = sprintf('%s/KEGG.pathway.names.tsv',Pars$suppl.data.dir)
Pars$GO.full.descriptions.File = sprintf('%s/Gene Ontology terms names and descriptions.tsv',Pars$suppl.data.dir)
if (!('pathview' %in% rownames(installed.packages()))){
install.packages(sprintf('%s/pathview_mod',suppl.data.dir), repos = NULL, type="source") }
library('pathview')
if (Pars$Use.Info.Table & file.exists(Pars$RefSeq.Info.File)) {
Data$Info.table = read.table(Pars$RefSeq.Info.File,stringsAsFactors = F,blank.lines.skip = F,sep = '\t')
} else {
Pars$Use.Info.Table = F
Data$Info.table = NA
}
# Loading lists of custom GO terms and KEGG pathways
Data$GO.Expression.Profiles___Custom.GO.terms = Read.Custom.GO.terms(Parameters.xlsx.file.name)
Data$Custom.Pathways.to.Visualize = Read.Custom.KEGG.pathways(Parameters.xlsx.file.name,Pars$Species)
Data$Omit.pathways = Read.KEGG.pathways.to.omit(Parameters.xlsx.file.name,Pars$Species)
# Loading pathway names
if (Pars$Perform.Pathway.GSEA | Pars$Perform.Pathway.Visualization){
Pathway.names.table = read.table(Pars$Pathway.names.table.File,sep='\t',stringsAsFactors = F,quote = "")
colnames(Pathway.names.table) = c("KEGG ID","Pathway name")
Pathway.names.table[,"KEGG ID"] = sprintf("%s%.5d",Pars$Species,Pathway.names.table[,"KEGG ID"])
rownames(Pathway.names.table) = Pathway.names.table[,"KEGG ID"]
Pathway.names.table[,"Pathway name"] = gsub(pattern = "'",replacement = "",x = Pathway.names.table[,"Pathway name"])
Pathway.names.table[,"Pathway name"] = gsub(pattern = "/",replacement = "-",x = Pathway.names.table[,"Pathway name"])
Data$Pathway.names.table = Pathway.names.table
}
# Loading GO names and descriptions
if (Pars$Perform.Gene.Ontology.GSEA | length(Data$GO.Expression.Profiles___Custom.GO.terms) > 0){
GO.full.descriptions = read.table(Pars$GO.full.descriptions.File,sep='\t',check.names = F,quote = "",stringsAsFactors = F,header = F,comment.char = '#')
colnames(GO.full.descriptions) = c('GO term','name','full description')
rownames(GO.full.descriptions) = GO.full.descriptions[,'GO term']
Data$GO.full.descriptions = GO.full.descriptions
tmp = GO.full.descriptions[!(duplicated(GO.full.descriptions[,'name'])),]
GO.term.ID.by.name = tmp[,'GO term']
names(GO.term.ID.by.name) = tmp[,'name']
tmp = GO.term.ID.by.name[Data$GO.Expression.Profiles___Custom.GO.terms]
for (i in Data$GO.Expression.Profiles___Custom.GO.terms[is.na(tmp)]){
message(sprintf('\nWarning. Custom GO term "%s" is not found', i))
}
tmp = tmp[!is.na(tmp)]
Data$GO.Expression.Profiles___Custom.GO.terms = tmp[!duplicated(tmp)]
}
Data$Completed.steps.file = sprintf("%s/Completed.steps.list",Pars$results.dir)
setwd(Pars$results.dir)
tryCatch(expr = { schema = readxl::read_excel(Parameters.xlsx.file.name,sheet='Sample setup',col_names = T)
}, error = function (err){
stop(sprintf('Sheet "Sample setup" is not found in workbook %s. Use an example in ./RTrans.base/Parameters.example.xlsx',file.name))
})
commented.lines = apply(X = schema[,1],MARGIN = 1,FUN = function (x) substring(x,first=1,last=1)) %in% '#'
schema = schema[!commented.lines,]
schema
schema$'Sample names'
schema[['Sample names']]
